<?php
$screens = $block->getJson($block->getScreenProducts());
$projectors = $block->getJson($block->getProjectorProducts());
$currentSku = $block->getCurrentProductSku();
?>

<div class="wrapper">
    <div class="projector-distance-widget inline-block"
         style="width: 300px"
         x-data='{
        projectors: <?php echo $projectors; ?>,
        screens: <?php echo $screens; ?>,
        currentSKU: "<?php echo $currentSku; ?>",
        selectedProjectorSKU: "",
        selectedScreenSKU: "",
        outputtedUnit: "meters",
        selectedProjector: null,
        selectedScreen: null,
        screenSize: null,
        projectorThrow: {
            min: null,
            max: null
        },
        unitConversion: {
            "mm": 10,
            "cm": 1,
            "inches": 0.393701,
            "meters": 0.01
        },
        precision: {
            "mm": 0,
            "cm": 1,
            "inches": 1,
            "meters": 2
        },
        handleProjectorSelect( sku = null ) {
            this.selectedProjector = this.projectors.find(product => product.sku === this.selectedProjectorSKU);
            this.selectedScreen = this.screens.find(screen => screen.sku === this.selectedScreenSKU);
            if (this.selectedScreen) {
                this.screenSize = this.selectedScreen.screen_width;
            }
        },
        handleScreenSelect( sku = null) {
            if (this.selectedProjector && this.screenSize) {
                const conversionFactor = this.unitConversion[this.outputtedUnit];
                const distanceInMeters = this.screenSize * this.selectedProjector.projector_throw_min * conversionFactor;

                this.projectorThrow.min = distanceInMeters.toFixed(this.precision[this.outputtedUnit]);
                this.projectorThrow.max = (this.screenSize * this.selectedProjector.projector_throw_max * conversionFactor).toFixed(this.precision[this.outputtedUnit]);
            }
        },
        initializeSelectedSKU() {
            if (this.projectors.some(projector => projector.sku === this.currentSKU)) {
                this.selectedProjectorSKU = this.currentSKU;
            }
            if (this.screens.some(screen => screen.sku === this.currentSKU)) {
                this.selectedScreenSKU = this.currentSKU;
            }
        }
    }'
         x-init="initializeSelectedSKU();handleProjectorSelect()"

        x-ref="projectorDistanceWidget"
    >


        <div class="flex flex-col justify-center items-center border border-grey-100 bg-grey-300">
            <?php if($block->getData('heading')) : ?>
                <div class="pt-3">
                    <h4 class="text-xl p-0 m-0"><?php echo $block->getData('heading'); ?></h4>
                </div>
            <?php endif; ?>

            <div class="w-full p-3 pb-0">
                <select x-model="selectedScreenSKU" @change="handleProjectorSelect(); handleScreenSelect();" class="w-full screen-size-select">
                    <option value="" disabled selected>Select a screen</option>
                    <template x-for="(screen, index) in screens" :key="index">
                        <option :value="screen.sku" x-text="`${screen.sku}`" x-bind:selected="screen.sku === currentSKU"></option>
                    </template>
                </select>
            </div>

            <div class="w-full p-3 pb-0">
                <select x-model="selectedProjectorSKU" @change="handleProjectorSelect(); handleScreenSelect();" class="w-full projector-select">
                    <option value="" disabled selected>Select a projector</option>
                    <template x-for="(projector, index) in projectors" :key="index">
                        <option :value="projector.sku" x-text="projector.sku" x-bind:selected="projector.sku === currentSKU"></option>
                    </template>
                </select>
            </div>

            <?php if($block->getData('show_screen_width_input')) : ?>
                <div>
                    <label for="screenSize">Screen Size (cm):</label>
                    <input id="screenSize" type="text" x-model="screenSize" @input="handleScreenSelect">
                </div>
            <?php endif ?>

            <div x-show="selectedProjector">
                <div class="p-3 pt-0 text-center">
                    <p x-show="projectorThrow.min && projectorThrow.max" class="text-xl">
                        Min: <span class="font-bold" x-text="projectorThrow.min"></span> <span class="font-bold" x-text="outputtedUnit"></span><br />
                        Max: <span class="font-bold" x-text="projectorThrow.max"></span> <span class="font-bold" x-text="outputtedUnit"></span>
                    </p>
                </div>
            </div>

            <div class="w-full p-3">
                <select x-model="outputtedUnit" @change="handleScreenSelect" class="w-full">
                    <option value="meters">Meters</option>
                    <option value="mm">Millimeters</option>
                    <option value="cm" selected>Centimeters</option>
                    <option value="inches">Inches</option>
                </select>
            </div>

        </div>
    </div>
</div>

<script>

    const screenTrigger = document.querySelector('.screen-trigger');
    screenTrigger.addEventListener('change', function(event) {
        const selectedOption = event.target.options[event.target.selectedIndex];
        let skuValue = selectedOption.getAttribute('data-sku');
        const match = skuValue.match(/^([^\-]+)/);
        if (match) {
            let targetSelector = document.querySelector(".screen-size-select");
            selectOption(targetSelector, match[1] + "-SERIES");
        }
    });


    const projectorTrigger = document.querySelector('.projector-trigger');
    projectorTrigger.addEventListener('change', function(event) {
        const selectedOption = event.target.options[event.target.selectedIndex];
        let skuValue = selectedOption.getAttribute('data-sku');
        let targetSelector = document.querySelector(".projector-select");
        selectOption(targetSelector, selectedOption.getAttribute('data-sku'));
    });

    document.addEventListener("DOMContentLoaded", function() {
        var event = new Event('change');
        if (screenTrigger) screenTrigger.dispatchEvent(event);
        if (projectorTrigger) projectorTrigger.dispatchEvent(event);
    });

    // select the option only if the option value exists in the select
    function selectOption(selectElement, optionValue) {
        let option = selectElement.querySelector('option[value="' + optionValue + '"]');
        if (option) {
            selectElement.value = optionValue;
            let eventTrigger = document.createEvent('Event');
            eventTrigger.initEvent('change', true, true);
            selectElement.dispatchEvent(eventTrigger);
        }
    }

</script>
