<?php
$screens = $block->getJson($block->getScreenProducts());
$projectors = $block->getJson($block->getProjectorProducts());
$currentSku = $block->getCurrentProductSku();
?>

<div class="wrapper">
    <div class="projector-distance-widget flex flex-1 w-full"
         x-data='{
        projectors: <?php echo $projectors; ?>,
        screens: <?php echo $screens; ?>,
        currentSKU: "<?php echo $currentSku; ?>",
        selectedProjectorSKU: "",
        selectedScreenSKU: "",
        outputtedUnit: "meters",
        selectedProjector: null,
        selectedScreen: null,
        screenSize: null,
        projectorThrow: {
            min: null,
            max: null,
            minMeters: null,
            maxMeters: null
        },
        unitConversion: {
            "mm": 10,
            "cm": 1,
            "inches": 0.393701,
            "meters": 0.01
        },
        precision: {
            "mm": 0,
            "cm": 1,
            "inches": 1,
            "meters": 2
        },
        handleProjectorSelect( sku = null ) {
            this.selectedProjector = this.projectors.find(product => product.sku === this.selectedProjectorSKU);
            this.selectedScreen = this.screens.find(screen => screen.sku === this.selectedScreenSKU);
            if (this.selectedScreen) {
                this.screenSize = this.selectedScreen.screen_viewable_width;
            }
        },
        handleScreenSelect( sku = null) {
            if (this.selectedProjector && this.screenSize) {
                const conversionFactor = this.unitConversion[this.outputtedUnit];
                const distanceInMeters = this.screenSize * this.selectedProjector.projector_throw_min * conversionFactor;

                this.projectorThrow.minMeters = parseFloat(distanceInMeters.toFixed(this.precision[this.outputtedUnit]));
                this.projectorThrow.maxMeters = parseFloat((this.screenSize * this.selectedProjector.projector_throw_max * conversionFactor).toFixed(this.precision[this.outputtedUnit]));

                console.error("minMeters", this.projectorThrow.minMeters);
                console.error("maxMeters", this.projectorThrow.maxMeters);

                //this.maxMeters = this.projectorThrow.maxMeters;

                this.projectorThrow.min = distanceInMeters.toFixed(this.precision[this.outputtedUnit]);
                this.projectorThrow.max = (this.screenSize * this.selectedProjector.projector_throw_max * conversionFactor).toFixed(this.precision[this.outputtedUnit]);
            }
        },
        initializeSelectedSKU() {
            if (this.projectors.some(projector => projector.sku === this.currentSKU)) {
                this.selectedProjectorSKU = this.currentSKU;
            }
            if (this.screens.some(screen => screen.sku === this.currentSKU)) {
                this.selectedScreenSKU = this.currentSKU;
            }
        },
        maxMeters: 10,
        containerWidth: 0,
        projectorWidth: 100,
        initContainerWidth: function() {
            this.containerWidth = this.$refs.container.offsetWidth;
        },
        calculateDistanceInPixels: function() {
            let percentage = (100 / this.maxMeters) * parseFloat(this.projectorThrow?.maxMeters);

            if(percentage > 100) percentage = 100;
            if(percentage < 0) percentage = 0;

            return percentage;


        }
    }'
         x-init="initializeSelectedSKU(); handleProjectorSelect(); initContainerWidth();"

        x-ref="projectorDistanceWidget"
    >


        <div class="flex flex-col justify-center items-center border border-grey-100 bg-grey-300">
            <?php if($block->getData('heading')) : ?>
                <div class="pt-3">
                    <h4 class="text-xl p-0 m-0"><?php echo $block->getData('heading'); ?></h4>
                </div>
            <?php endif; ?>

            <div class="w-full p-3 pb-0">
                <select x-model="selectedScreenSKU" @change="handleProjectorSelect(); handleScreenSelect();" class="w-full screen-size-select">
                    <option value="" disabled selected>Select a screen</option>
                    <template x-for="(screen, index) in screens" :key="index">
                        <option :value="screen.sku" x-text="`${screen.sku}`" x-bind:selected="screen.sku === currentSKU"></option>
                    </template>
                </select>
            </div>

            <div class="w-full p-3 pb-0">
                <select x-model="selectedProjectorSKU" @change="handleProjectorSelect(); handleScreenSelect();" class="w-full projector-select">
                    <option value="" disabled selected>Select a projector</option>
                    <template x-for="(projector, index) in projectors" :key="index">
                        <option :value="projector.sku" x-text="projector.sku" x-bind:selected="projector.sku === currentSKU"></option>
                    </template>
                </select>
            </div>

            <?php if(/*$block->getData('show_room_width_input')*/ 1 == 1) : ?>
                <div>
                    <label for="maxMeters">Room Length (cm):</label>
                    <input id="maxMeters" type="text" x-model="maxMeters" />
                </div>
            <?php endif ?>

            <?php if($block->getData('show_screen_width_input')) : ?>
                <div>
                    <label for="screenSize">Screen Size (cm):</label>
                    <input id="screenSize" type="text" x-model="screenSize" @input="handleScreenSelect">
                </div>
            <?php endif ?>



            <div x-show="selectedProjector">
                <div class="p-3 pt-5 text-center">
                    <span x-show="projectorThrow.min && projectorThrow.max" class="text-xl pb-0 mb-0">
                        Min: <span class="font-bold" x-text="projectorThrow.min"></span> <span class="font-bold" x-text="outputtedUnit"></span><br />
                        Max: <span class="font-bold" x-text="projectorThrow.max"></span> <span class="font-bold" x-text="outputtedUnit"></span>
                    </span>
                </div>
            </div>

            <div class="w-full p-3">
                <select x-model="outputtedUnit" @change="handleScreenSelect" class="w-full">
                    <option value="meters">Meters</option>
                    <option value="mm">Millimeters</option>
                    <option value="cm" selected>Centimeters</option>
                    <option value="inches">Inches</option>
                </select>
            </div>

        </div>

        <div class="projector-diagram w-full h-[500px] bg-blue-100 relative" x-ref="container">

            <!-- The Projector -->
            <div
                class="the-projector absolute h-[50px] w-[100px] bg-red-400"
                style="right:0"
                :style="{right: calculateDistanceInPixels() + '%'}"
            >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 50" width="300" height="150">
                    <!-- Body of the projector (upside down) -->
                    <rect x="10" y="10" width="80" height="20" fill="#ccc" stroke="#000" stroke-width="1" transform="rotate(180, 50, 20)"/>

                    <!-- Lens (upside down) -->
                    <circle cx="80" cy="20" r="6" fill="blue" stroke="#000" stroke-width="1" transform="rotate(180, 80, 20)"/>

                    <!-- Projector buttons (upside down) -->
                    <rect x="20" y="12" width="5" height="5" fill="#666" transform="rotate(180, 22.5, 14.5)"/>
                    <rect x="28" y="12" width="5" height="5" fill="#666" transform="rotate(180, 30.5, 14.5)"/>
                    <rect x="36" y="12" width="5" height="5" fill="#666" transform="rotate(180, 38.5, 14.5)"/>

                    <!-- Feet of the projector -->
                    <rect x="15" y="8" width="10" height="2" fill="#000" transform="rotate(180, 20, 9)"/>
                    <rect x="75" y="8" width="10" height="2" fill="#000" transform="rotate(180, 80, 9)"/>

                    <!-- Light beam (upside down) -->
                    <polygon points="85,20 100,15 100,25" fill="rgba(255, 255, 0, 0.4)" transform="rotate(180, 92.5, 20)"/>

                    <!-- Label text -->
                    <text x="10" y="35" font-family="Arial" font-size="5" fill="black">Projector (Upside Down)</text>
                </svg>

            </div>



            <!-- Markers for distance -->
            <div class="distance-markers absolute bottom-0 w-full h-[30px] bg-red-400">
                <template x-for="n in Array.from({ length: Math.ceil(maxMeters) + 1 }, (_, i) => i).reverse()">
                    <div class="marker absolute w-[1px] bg-black h-full"
                         :style="{ left: `${((maxMeters - n) / maxMeters) * 100}%`, transform: 'translateX(-50%)' }">
                        <span class="absolute top-full translate-y-2 text-sm" x-text="n === 0 ? '0m' : n + 'm'"></span>
                    </div>
                </template>
            </div>


            <div class="distance-markers absolute top-0 w-full h-[30px] flex justify-between bg-red-blue">
                <div class="min-distance bg-red-300 h-10 absolute top-[30px]"
                     :style="{ right:0, width: `${( (100 / maxMeters) * projectorThrow.maxMeters)}%` }">
                </div>
                <div class="min-distance bg-red-400 h-10 absolute"
                     :style="{ right:0, width: `${( (100 / maxMeters) * projectorThrow.minMeters)}%` }">
                </div>
            </div>

            <div class="distance-markers absolute bottom-0 w-full h-[30px] flex justify-between bg-red-blue">
                <div class="min-distance bg-red-600 h-5 absolute bottom-[30px]"
                     :style="{ right:0, width: `${( (100 / maxMeters) * projectorThrow.maxMeters)}%` }">
                </div>
                <div class="min-distance bg-red-700 h-5 absolute bottom-35px"
                     :style="{ right:0, width: `${( (100 / maxMeters) * projectorThrow.minMeters)}%` }">
                </div>
            </div>





        </div>

    </div><!-- end alpine widget -->
</div>

<script>

    const screenTrigger = document.querySelector('.screen-trigger');
    screenTrigger?.addEventListener('change', function(event) {
        const selectedOption = event.target.options[event.target.selectedIndex];
        let skuValue = selectedOption.getAttribute('data-sku');
        const match = skuValue.match(/^([^\-]+)/);
        if (match) {
            let targetSelector = document.querySelector(".screen-size-select");
            selectOption(targetSelector, match[1] + "-SERIES");
        }
    });


    const projectorTrigger = document.querySelector('.projector-trigger');
    projectorTrigger?.addEventListener('change', function(event) {
        const selectedOption = event.target.options[event.target.selectedIndex];
        let skuValue = selectedOption.getAttribute('data-sku');
        let targetSelector = document.querySelector(".projector-select");
        selectOption(targetSelector, selectedOption.getAttribute('data-sku'));
    });

    document.addEventListener("DOMContentLoaded", function() {
        var event = new Event('change');
        if (screenTrigger) screenTrigger.dispatchEvent(event);
        if (projectorTrigger) projectorTrigger.dispatchEvent(event);
    });

    // select the option only if the option value exists in the select
    function selectOption(selectElement, optionValue) {
        let option = selectElement.querySelector('option[value="' + optionValue + '"]');
        if (option) {
            selectElement.value = optionValue;
            let eventTrigger = document.createEvent('Event');
            eventTrigger.initEvent('change', true, true);
            selectElement.dispatchEvent(eventTrigger);
        }
    }

</script>

<script>
    screenTrigger.on("change", )
</script>
